{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../test/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { HttpInstrumentationConfig } from '@opentelemetry/instrumentation-http';\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { getNodeAutoInstrumentations } from '../src';\nimport { getResourceDetectorsFromEnv } from '../src/utils';\n\ndescribe('utils', () => {\n  describe('getNodeAutoInstrumentations', () => {\n    it('should include all installed instrumentations', () => {\n      const instrumentations = getNodeAutoInstrumentations();\n      const installedInstrumentations = Object.keys(\n        require('../package.json').dependencies\n      ).filter(depName => {\n        return depName.startsWith('@opentelemetry/instrumentation-');\n      });\n\n      assert.deepStrictEqual(\n        new Set(instrumentations.map(i => i.instrumentationName)),\n        new Set(installedInstrumentations)\n      );\n    });\n\n    it('should use user config', () => {\n      function applyCustomAttributesOnSpan() {}\n\n      const instrumentations = getNodeAutoInstrumentations({\n        '@opentelemetry/instrumentation-http': {\n          applyCustomAttributesOnSpan,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr =>\n          instr.instrumentationName === '@opentelemetry/instrumentation-http'\n      ) as any;\n      const configHttp = instrumentation._config as HttpInstrumentationConfig;\n\n      assert.strictEqual(\n        configHttp.applyCustomAttributesOnSpan,\n        applyCustomAttributesOnSpan\n      );\n    });\n\n    it('should not return disabled instrumentation', () => {\n      const instrumentations = getNodeAutoInstrumentations({\n        '@opentelemetry/instrumentation-grpc': {\n          enabled: false,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr =>\n          instr.instrumentationName === '@opentelemetry/instrumentation-grpc'\n      );\n      assert.strictEqual(instrumentation, undefined);\n    });\n\n    it('should show error for none existing instrumentation', () => {\n      const spy = sinon.stub(diag, 'error');\n      const name = '@opentelemetry/instrumentation-http2';\n      const instrumentations = getNodeAutoInstrumentations({\n        // @ts-expect-error verify that wrong name works\n        [name]: {\n          enabled: false,\n        },\n      });\n      const instrumentation = instrumentations.find(\n        instr => instr.instrumentationName === name\n      );\n      assert.strictEqual(instrumentation, undefined);\n\n      assert.strictEqual(\n        spy.args[0][0],\n        `Provided instrumentation name \"${name}\" not found`\n      );\n\n      spy.restore();\n    });\n  });\n\n  describe('getResourceDetectorsFromEnv', () => {\n    it('should return all resource detectors by default', () => {\n      assert.equal(getResourceDetectorsFromEnv().length, 12);\n    });\n\n    it('should return all resource detectors when OTEL_NODE_RESOURCE_DETECTORS contains \"all\"', () => {\n      process.env.OTEL_NODE_RESOURCE_DETECTORS = 'all';\n\n      assert.equal(getResourceDetectorsFromEnv().length, 12);\n\n      delete process.env.OTEL_NODE_RESOURCE_DETECTORS;\n    });\n\n    it('should return specific resource detectors depending on OTEL_NODE_RESOURCE_DETECTORS', () => {\n      process.env.OTEL_NODE_RESOURCE_DETECTORS = 'env,host';\n\n      const resourceDetectors = getResourceDetectorsFromEnv();\n\n      assert.equal(resourceDetectors.length, 2);\n      assert.equal(resourceDetectors[0].constructor.name, 'EnvDetectorSync');\n      assert.equal(resourceDetectors[1].constructor.name, 'HostDetectorSync');\n\n      delete process.env.OTEL_NODE_RESOURCE_DETECTORS;\n    });\n\n    it('should return no resource detectors when OTEL_NODE_RESOURCE_DETECTORS contains \"none\" or a typo', () => {\n      const spy = sinon.stub(diag, 'error');\n      process.env.OTEL_NODE_RESOURCE_DETECTORS = 'none';\n\n      assert.equal(getResourceDetectorsFromEnv().length, 0);\n\n      assert.strictEqual(spy.callCount, 0);\n\n      process.env.OTEL_NODE_RESOURCE_DETECTORS = 'test';\n\n      assert.equal(getResourceDetectorsFromEnv().length, 0);\n\n      assert.strictEqual(\n        spy.args[0][0],\n        'Invalid resource detector \"test\" specified in the environment variable OTEL_NODE_RESOURCE_DETECTORS'\n      );\n\n      spy.restore();\n      delete process.env.OTEL_NODE_RESOURCE_DETECTORS;\n    });\n  });\n});\n"]}