{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  trace,\n  isSpanContextValid,\n  Span,\n} from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { BunyanInstrumentationConfig } from './types';\nimport { VERSION } from './version';\nimport type * as BunyanLogger from 'bunyan';\n\nexport class BunyanInstrumentation extends InstrumentationBase<\n  typeof BunyanLogger\n> {\n  constructor(config: BunyanInstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-bunyan', VERSION, config);\n  }\n\n  protected init() {\n    return [\n      new InstrumentationNodeModuleDefinition<typeof BunyanLogger>(\n        'bunyan',\n        ['<2.0'],\n        logger => {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const proto = logger.prototype as any;\n          if (isWrapped(proto['_emit'])) {\n            this._unwrap(proto, '_emit');\n          }\n\n          this._wrap(\n            proto,\n            '_emit',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this._getPatchedEmit() as any\n          );\n          return logger;\n        },\n        logger => {\n          if (logger === undefined) return;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this._unwrap(logger.prototype as any, '_emit');\n        }\n      ),\n    ];\n  }\n\n  override getConfig(): BunyanInstrumentationConfig {\n    return this._config;\n  }\n\n  override setConfig(config: BunyanInstrumentationConfig) {\n    this._config = config;\n  }\n\n  private _getPatchedEmit() {\n    return (original: (...args: unknown[]) => void) => {\n      const instrumentation = this;\n      return function patchedEmit(this: BunyanLogger, ...args: unknown[]) {\n        const span = trace.getSpan(context.active());\n\n        if (!span) {\n          return original.apply(this, args);\n        }\n\n        const spanContext = span.spanContext();\n\n        if (!isSpanContextValid(spanContext)) {\n          return original.apply(this, args);\n        }\n\n        const record = args[0] as Record<string, string>;\n        record['trace_id'] = spanContext.traceId;\n        record['span_id'] = spanContext.spanId;\n        record['trace_flags'] = `0${spanContext.traceFlags.toString(16)}`;\n\n        instrumentation._callHook(span, record);\n\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  private _callHook(span: Span, record: Record<string, string>) {\n    const hook = this.getConfig().logHook;\n\n    if (typeof hook !== 'function') {\n      return;\n    }\n\n    safeExecuteInTheMiddle(\n      () => hook(span, record),\n      err => {\n        if (err) {\n          diag.error('bunyan instrumentation: error calling logHook', err);\n        }\n      },\n      true\n    );\n  }\n}\n"]}