{"version":3,"file":"OTLPMetricExporter.js","sourceRoot":"","sources":["../../src/OTLPMetricExporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGH,OAAO,EACL,iBAAiB,EACjB,yBAAyB,GAC1B,MAAM,yCAAyC,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAE3D,OAAO,EAAE,sBAAsB,EAAE,MAAM,2CAA2C,CAAC;AACnF,OAAO,EAEL,uBAAuB,EACvB,2BAA2B,GAC5B,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EACL,iCAAiC,GAElC,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,IAAM,+BAA+B,GAAG,YAAY,CAAC;AACrD,IAAM,qBAAqB,GAAG,2BAAyB,+BAAiC,CAAC;AACzF,IAAM,UAAU,GAAG;IACjB,YAAY,EAAE,mCAAiC,OAAS;CACzD,CAAC;AAEF;IAA0C,+CAGzC;IACC,qCAAY,MAA+D;QAA3E,YACE,kBAAM,MAAM,CAAC,SAQd;QAPC,KAAI,CAAC,OAAO,kCACP,KAAI,CAAC,OAAO,GACZ,UAAU,GACV,YAAY,CAAC,uBAAuB,CACrC,MAAM,EAAE,CAAC,kCAAkC,CAC5C,CACF,CAAC;;IACJ,CAAC;IAED,6CAAO,GAAP,UAAQ,OAA0B;QAChC,OAAO,iCAAiC,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,mDAAa,GAAb,UAAc,MAAkC;QAC9C,OAAO,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;YACnC,CAAC,CAAC,MAAM,CAAC,GAAG;YACZ,CAAC,CAAC,MAAM,EAAE,CAAC,mCAAmC,CAAC,MAAM,GAAG,CAAC;gBACzD,CAAC,CAAC,2BAA2B,CACzB,MAAM,EAAE,CAAC,mCAAmC,CAC7C;gBACH,CAAC,CAAC,MAAM,EAAE,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC;oBACjD,CAAC,CAAC,uBAAuB,CACrB,MAAM,EAAE,CAAC,2BAA2B,EACpC,+BAA+B,CAChC;oBACH,CAAC,CAAC,qBAAqB,CAAC;IAC5B,CAAC;IAED,0DAAoB,GAApB;QACE,OAAO,iBAAiB,CAAC,OAAO,CAAC;IACnC,CAAC;IACH,kCAAC;AAAD,CAAC,AArCD,CAA0C,yBAAyB,GAqClE;AAED;IAAwC,sCAAmD;IACzF,4BAAY,MAA+D;eACzE,kBAAM,IAAI,2BAA2B,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;IACxD,CAAC;IACH,yBAAC;AAAD,CAAC,AAJD,CAAwC,sBAAsB,GAI7D","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPMetricExporterOptions } from '@opentelemetry/exporter-metrics-otlp-http';\nimport {\n  ServiceClientType,\n  OTLPProtoExporterNodeBase,\n} from '@opentelemetry/otlp-proto-exporter-base';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { OTLPMetricExporterBase } from '@opentelemetry/exporter-metrics-otlp-http';\nimport {\n  OTLPExporterNodeConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  createExportMetricsServiceRequest,\n  IExportMetricsServiceRequest,\n} from '@opentelemetry/otlp-transformer';\nimport { VERSION } from './version';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/metrics';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\nclass OTLPMetricExporterNodeProxy extends OTLPProtoExporterNodeBase<\n  ResourceMetrics,\n  IExportMetricsServiceRequest\n> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(config);\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      ),\n    };\n  }\n\n  convert(metrics: ResourceMetrics[]): IExportMetricsServiceRequest {\n    return createExportMetricsServiceRequest(metrics);\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase) {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(\n          getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n        )\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.METRICS;\n  }\n}\n\nexport class OTLPMetricExporter extends OTLPMetricExporterBase<OTLPMetricExporterNodeProxy> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(new OTLPMetricExporterNodeProxy(config), config);\n  }\n}\n"]}